name: Build & Test

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: dia doxygen doxygen-doc doxygen-gui doxygen-latex graphviz mscgen
          version: 1.0

      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages:
            libfontconfig1-dev libfreetype6-dev libx11-dev libx11-xcb-dev
            libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev
            libxcb-cursor-dev libxcb-glx0-dev libxcb-keysyms1-dev
            libxcb-image0-dev libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev
            libxcb-xfixes0-dev libxcb-shape0-dev libxcb-randr0-dev
            libxcb-render-util0-dev libxcb-util-dev libxcb-xinerama0-dev
            libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev
            libgl-dev libgl1-mesa-dev qttools5-dev
          version: 1.0

      #    - name: update ubuntu
      #      run: sudo apt-get update && sudo apt-get install -y git && sudo apt-get install -y jq

      - name: fix apt.install on system-requirements
        run: |
          export CONAN_SYSREQUIRES_MODE="enabled"
          export CONAN_SYSREQUIRES_SUDO="1"

      ##########################################################################

      - name: Install Conan # https://github.com/turtlebrowser/get-conan
        id: conan
        uses: turtlebrowser/get-conan@main
        with:
          version: 2.0.8

      - name: Configure Conan
        run: |
          conan profile detect

          echo "${{ steps.conan.outputs.version }}"
          conan profile list
          conan profile path default
          conan profile show
          conan remote list

          echo "Replace conan-profile with your own profile..."
          cat /home/runner/.conan2/profiles/default
          cp -f ${{ github.workspace }}/conan-profile.txt /home/runner/.conan2/profiles/default
          cat /home/runner/.conan2/profiles/default

          ls -lisa ~/.conan2/
          ls -lisa ~/.conan2/p

        ########################################################################

      - name: Cache Conan packages dependencies
        id: cache-conan-packages
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # conan2 packages are stored in `~/.conan2/p` on Linux
          path: ~/.conan2/p
          key: ${{ runner.os }}-conan-install-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-conan-install-
            ${{ runner.os }}-

      - name: Info on cache
        run: |
          echo "Cache hit: ${{ steps.cache-conan-packages.outputs.cache-hit }}"
          echo "Cache outputs: ${{ steps.cache-conan-packages.outputs }}"
          echo "Cache general: ${{ steps.cache-conan-packages }}"

      - name: Conan - Install package dependencies from conanfile.txt
        run: |
          mkdir -p ${{ github.workspace }}/build/
          cd ${{ github.workspace }}/build/
          conan install .. \
            -s build_type=${{ env.BUILD_TYPE }} \
            --output-folder=. \
            --build=missing \
            --profile:build=${{ github.workspace }}/conan-profile.txt \
            --profile:host=${{ github.workspace }}/conan-profile.txt \

        ########################################################################

      - name: Cache Conan packages dependencies
        id: cache-cmake-build
        uses: actions/cache@v3
        env:
          cache-name: cache-cmake-build
        with:
          path: ${{ github.workspace }}/build
          key: ${{ runner.os }}-cmake-build-${{ env.cache-name }}
          restore-keys: |
            ${{ runner.os }}-cmake-build-
            ${{ runner.os }}-

      - name: Configure CMake
        run: |
          cd ${{ github.workspace }}/build/
          cmake .. -DCMAKE_TOOLCHAIN_FILE=conan_toolchain.cmake -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: |
          cd ${{ github.workspace }}/build/
          cmake --build . -j 4

      - name: Test
        working-directory: ${{ github.workspace }}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ${{ github.workspace }}/bin/MCTS_ConnectFour_tests
        # ctest -C ${{ env.BUILD_TYPE }}
